---

- hosts: localhost
  gather_facts: false
  vars_files:
    - "{{ lookup('env','CONFDIR') }}/variables/account.yml"
  tasks:

    - name: Check if autoscan.service exists
      stat:
        path: "/home/{{ lookup('env','USER') }}/scripts/autoscan/config.yml"
      register: autoscan_service

    - name: Service Tasks
      block:

      - name: Stop autoscan
        docker_container:
          name: autoscan
          state: stopped

      - name: remove container Autoscan
        docker_container:
          name: autoscan
          state: absent

      - name: delete autoscan folder
        become: yes
        file:
          path: "/home/{{ lookup('env','USER') }}/scripts/autoscan"
          state: absent

      - name: "create autoscan state"
        become: yes
        shell: |
          echo "0" > {{ lookup('env','CONFDIR') }}/status/autoscan

      when: autoscan_service.stat.exists

    - name: Check if plex_autoscan.service exists
      stat:
        path: "/etc/systemd/system/plex_autoscan.service"
      register: plex_autoscan_service

    - name: Service Tasks
      block:

      - name: Populate Service Facts
        service_facts:

      - name: Get plex_autoscan service state
        set_fact:
          plex_autoscan_service_running: "{{ (services['plex_autoscan.service'] is defined) and (services['plex_autoscan.service']['state'] == 'running') }}"

      - name: Stop plex_autoscan service
        become: yes
        systemd:
          name: plex_autoscan
          state: stopped
        when: plex_autoscan_service_running

      - name: delete plex_autoscan.service
        become: yes
        file:
          path: /etc/systemd/system/plex_autoscan.service
          state: absent

      - name: delete plex_autoscan folder
        become: yes
        file:
          path: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan"
          state: absent

      when: plex_autoscan_service.stat.exists

    - name: Create plex_autoscan directories
      file: "path={{ item }} state=directory mode=0775 owner={{ lookup('env','MYUID') }} group={{ lookup('env','MYGID') }} recurse=yes"
      with_items:
        - "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan"

    - name: Clone plex_autoscan
      git:
        repo: https://github.com/l3uddz/plex_autoscan/
        dest: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan"
        version: HEAD
        force: yes
      become: yes
      become_user: "{{ lookup('env','USER') }}"

    - name: Install pip requirements
      pip:
        requirements: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/requirements.txt"
        executable: pip
        extra_args: --user

    - name: Check config exists
      stat:
        path: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/config/config.json"
      register: plex_autoscan_config

    - name: Do following tasks when config does not exist
      block:

      - name: "Generate 32 character SERVER_PASS"
        set_fact:
          plex_autoscan_server_pass: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') }}"

      - name: Import default config
        template:
          src: "{{ lookup('env','BASEDIR') }}/includes/config/roles/plex_autoscan/templates/config.json.j2"
          dest: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/config/config.json"
          owner: "{{lookup('env','MYUID')}}"
          group: "{{lookup('env','MYGID')}}"
          mode: 0775
          force: yes

      when: not plex_autoscan_config.stat.exists

    - name: Set 'PLEX_LD_LIBRARY_PATH' in config.json
      shell: |
        CONFIG_PATH="/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/config"
        jq -c '.PLEX_LD_LIBRARY_PATH = "/usr/lib/plexmediaserver/lib"' ${CONFIG_PATH}/config.json >> \
        ${CONFIG_PATH}/tmp.$$.json && mv ${CONFIG_PATH}/tmp.$$.json ${CONFIG_PATH}/config.json
      become: yes
      become_user: "{{ lookup('env','USER') }}"
      when: plex_autoscan_config.stat.exists

    - name: Set scan.py as executable
      file:
        path: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/scan.py"
        owner: "{{ lookup('env','USER') }}"
        group: "{{lookup('env','MYGID') }}"
        mode: a+x

    - name: Import plex_autoscan service
      become: yes
      template:
        src: "{{ lookup('env','BASEDIR') }}/includes/config/roles/plex_autoscan/templates/plex_autoscan.service.j2"
        dest: /etc/systemd/system/plex_autoscan.service
        force: yes

    - name: Import plex_autoscan.sh
      become: yes
      template:
        src: "{{ lookup('env','BASEDIR') }}/includes/config/roles/plex_autoscan/templates/plex_autoscan.sh.j2"
        dest: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/plex_autoscan.sh"
        force: yes
        owner: "{{ lookup('env','USER') }}"
        group: "{{user.groupid}}"
        mode: a+x

    - name: Start plex_autoscan service
      become: yes
      systemd:
        name: plex_autoscan
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Update config.json
      command: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/scan.py sections"
      ignore_errors: yes
      tags: plex_autoscan_update_sections

    - name: Configure PLEX_SECTION_PATH_MAPPINGS
      command: "/home/{{ lookup('env','USER') }}/scripts/plex_autoscan/scan.py update_config"
      ignore_errors: yes
      tags: plex_autoscan_update_sections

    - name: "create plex_autoscan state"
      become: yes
      shell: |
        echo "2" > {{ lookup('env','CONFDIR') }}/status/plex_autoscan

